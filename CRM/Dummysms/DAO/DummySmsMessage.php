<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from dummysms/xml/schema/CRM/Dummysms/DummySmsMessage.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:3d19badc8d0bc7c3666d285c8daf5133)
 */
use CRM_Dummysms_ExtensionUtil as E;

/**
 * Database access object for the DummySmsMessage entity.
 */
class CRM_Dummysms_DAO_DummySmsMessage extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_dummysms_message';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique DummySmsMessage ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Is the message inbound or outbound.
   *
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_inbound;

  /**
   * Complete phone number.
   *
   * @var string|null
   *   (SQL type: varchar(32))
   *   Note that values will be retrieved from the database as a string.
   */
  public $from_phone;

  /**
   * Complete phone number.
   *
   * @var string|null
   *   (SQL type: varchar(32))
   *   Note that values will be retrieved from the database as a string.
   */
  public $to_phone;

  /**
   * Body of the message.
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $body;

  /**
   * When the token was created.
   *
   * @var string
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $created_date;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_dummysms_message';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Dummy Sms Messages') : E::ts('Dummy Sms Message');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique DummySmsMessage ID'),
          'required' => TRUE,
          'where' => 'civicrm_dummysms_message.id',
          'table_name' => 'civicrm_dummysms_message',
          'entity' => 'DummySmsMessage',
          'bao' => 'CRM_Dummysms_DAO_DummySmsMessage',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'is_inbound' => [
          'name' => 'is_inbound',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Is Inbound'),
          'description' => E::ts('Is the message inbound or outbound.'),
          'required' => TRUE,
          'where' => 'civicrm_dummysms_message.is_inbound',
          'default' => '0',
          'table_name' => 'civicrm_dummysms_message',
          'entity' => 'DummySmsMessage',
          'bao' => 'CRM_Dummysms_DAO_DummySmsMessage',
          'localizable' => 0,
          'html' => [
            'type' => 'Radio',
          ],
          'add' => NULL,
        ],
        'from_phone' => [
          'name' => 'from_phone',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('From Phone'),
          'description' => E::ts('Complete phone number.'),
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'where' => 'civicrm_dummysms_message.from_phone',
          'dataPattern' => '/^[\d\(\)\-\.\s]+$/',
          'table_name' => 'civicrm_dummysms_message',
          'entity' => 'DummySmsMessage',
          'bao' => 'CRM_Dummysms_DAO_DummySmsMessage',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("From Phone"),
          ],
          'add' => NULL,
        ],
        'to_phone' => [
          'name' => 'to_phone',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('To Phone'),
          'description' => E::ts('Complete phone number.'),
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'where' => 'civicrm_dummysms_message.to_phone',
          'dataPattern' => '/^[\d\(\)\-\.\s]+$/',
          'table_name' => 'civicrm_dummysms_message',
          'entity' => 'DummySmsMessage',
          'bao' => 'CRM_Dummysms_DAO_DummySmsMessage',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("To Phone"),
          ],
          'add' => NULL,
        ],
        'body' => [
          'name' => 'body',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Body'),
          'description' => E::ts('Body of the message.'),
          'rows' => 8,
          'cols' => 80,
          'where' => 'civicrm_dummysms_message.body',
          'table_name' => 'civicrm_dummysms_message',
          'entity' => 'DummySmsMessage',
          'bao' => 'CRM_Dummysms_DAO_DummySmsMessage',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
            'label' => E::ts("Body in Text Format"),
          ],
          'add' => NULL,
        ],
        'created_date' => [
          'name' => 'created_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Created Date'),
          'description' => E::ts('When the token was created.'),
          'required' => FALSE,
          'where' => 'civicrm_dummysms_message.created_date',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_dummysms_message',
          'entity' => 'DummySmsMessage',
          'bao' => 'CRM_Dummysms_DAO_DummySmsMessage',
          'localizable' => 0,
          'add' => '5.35',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'dummysms_message', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'dummysms_message', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
